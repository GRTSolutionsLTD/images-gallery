{"version":3,"sources":["components/Image.component.js","App.js","serviceWorker.js","index.js"],"names":["Image","_this$props","this","props","image","handleChangePicture","corradations","react_default","a","createElement","className","class","src","alt","style","height","margin","type","id","accept","onChange","e","for","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_ref","target","fileReader","FileReader","readAsDataURL","files","onload","setState","prevState","images","result","renderImages","resource","Array","isArray","map","res","index","concat","toConsumableArray","config","extensions","find","ext","endsWith","startsWith","Image_component","key","join","state","data","_this2","axios","baseUrl","then","console","log","catch","err","classname","Boolean","window","location","hostname","match","ReactDOM","hydrate","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wQAqBeA,mLAlBJ,IAAAC,EAC8CC,KAAKC,MAAjDC,EADFH,EACEG,MAAOC,EADTJ,EACSI,oBAAqBC,EAD9BL,EAC8BK,aACrC,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACrBH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,aACXJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKR,EAAOS,IAAKT,EAAOM,UAAU,kBAAkBI,MAAO,CAACC,OAAQ,OAAQC,OAAQ,QACzFT,EAAAC,EAAAC,cAAA,OAAKE,MAAM,eACbJ,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,GAAG,aAAaC,OAAO,UACpCC,SAAU,SAAAC,GAAC,OAAIhB,EAAoBgB,EAAGf,MAE5CC,EAAAC,EAAAC,cAAA,SAAOE,MAAM,oBAAoBW,IAAI,yBAVrBC,aCwDLC,cAlDb,SAAAA,EAAYrB,GAAM,IAAAsB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAxB,KAAAsB,IACpBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA5B,KAAMC,KAkBJE,oBAAsB,SAAA0B,EAAazB,GAAiB,IAA3B0B,EAA2BD,EAA3BC,OACjBC,EAAa,IAAIC,WAEvBD,EAAWE,cAAcH,EAAOI,MAAM,IACtCH,EAAWI,OAAS,SAAChB,GACnBI,EAAKa,SAAS,SAACC,GAAD,MAAgB,CAC5BC,OAAQ,CAAE5B,IAAKS,EAAEW,OAAOS,OAAQnC,qBAzBpBmB,EA8BlBiB,aAAe,SAACC,EAAUrC,GACxB,OAAIsC,MAAMC,QAAQF,GACTA,EAASG,IAAI,SAACC,EAAKC,GAAN,OAAgBvB,EAAKiB,aAAaK,EAAlB,GAAAE,OAAAvB,OAAAwB,EAAA,EAAAxB,CAA2BpB,GAA3B,CAAyC0C,OAEvD,kBAAbL,IAA0BQ,EAAOC,WAAWC,KAAK,SAAAC,GAAG,OAAIX,EAASY,SAASD,MAASX,EAASa,WAAW,eACxGjD,EAAAC,EAAAC,cAACgD,EAAD,CAAOC,IAAKpD,EAAaqD,OAAQvD,MAAOuC,EAAUtC,oBAAqBoB,EAAKpB,oBAAqBC,aAAcA,IAElH,MAnCXmB,EAAKmC,MAAM,CACTC,KAAK,IAHapC,mFAOC,IAAAqC,EAAA5D,KACjB,OAAO6D,MAAA,GAAAd,OAAaE,EAAOa,QAApB,YACEC,KAAK,SAAAlB,GACFmB,QAAQC,IAAI,SACZD,QAAQC,IAAIpB,GACZe,EAAKxB,SAAS,CAACuB,KAAKd,EAAIc,SAE3BO,MAAM,SAAAC,GACHH,QAAQC,IAAI,4CA0BxB,OAAO5D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACpBH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,OAAK6D,UAAU,OACdpE,KAAKwC,aAAaxC,KAAK0D,MAAMC,KAAM,aA7CxBtC,aCKEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,QAAQtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.b3e274bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Image extends Component {\r\n  render() {\r\n      const {image, handleChangePicture, corradations} = this.props;\r\n    return (<div className=\"col-4\">     \r\n      <div class=\"container\">\r\n      <img src={image} alt={image} className=\"col img-rounded\" style={{height: \"100%\", margin: \"4%\"}} />\r\n      <div class=\"custom-file\">\r\n    <input type=\"file\" id=\"customFile\" accept=\"image/*\"\r\n          onChange={e => handleChangePicture(e, corradations)}\r\n         />\r\n    <label class=\"custom-file-label\" for=\"customFile\"/>\r\n  </div>\r\n</div>\r\n\r\n</div>\r\n     );\r\n  };\r\n}\r\n\r\nexport default Image;","import React, { Component } from 'react';\nimport * as axios from 'axios';\n\nimport * as _ from 'lodash';\nimport config from './config';\nimport Image from './components/Image.component';\n\nclass App extends Component {\n  constructor(props){\nsuper(props);\nthis.state={\n  data:[]\n}\n }  \n  \n componentDidMount() {\n    return axios.get(`${config.baseUrl}project`)\n            .then(res => {\n                console.log('res: ');\n                console.log(res);\n                this.setState({data:res.data});\n            })\n            .catch(err => {\n                console.log(\"error\");\n            });\n  }\n\n  handleChangePicture = ({ target }, corradations) => {\n    const fileReader = new FileReader();\ndebugger;\n    fileReader.readAsDataURL(target.files[0]);\n    fileReader.onload = (e) => {\n      this.setState((prevState) => ({\n        images: { src: e.target.result, corradations}\n      }));\n    };\n  };\n\n  renderImages = (resource, corradations) => {   \n    if (Array.isArray(resource)) {\n      return resource.map((res, index) => this.renderImages(res, [...corradations, index]));\n    }\n    if (typeof resource === 'string' && (config.extensions.find(ext => resource.endsWith(ext)) || resource.startsWith('data:image'))) {\n      return  <Image key={corradations.join()} image={resource} handleChangePicture={this.handleChangePicture} corradations={corradations} />;\n    }\n    return null;\n  }\n\n  render() {\n    return <div className=\"container\">\n      <h2>Image Gallery</h2>\n      <div classname=\"row\">\n      {this.renderImages(this.state.data, [])}        \n      </div>\n      </div>;\n  };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.hydrate(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}